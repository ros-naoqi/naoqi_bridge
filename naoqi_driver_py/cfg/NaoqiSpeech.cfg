#!/usr/bin/env python
#
# Generate dynamic reconfigure options for nao_speech.py
#
# Copyright (c) 2013, Miguel Sarabia
# Imperial College London
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    # Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#    # Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#    # Neither the name of the Imperial College London nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

import sys
import dynamic_reconfigure.parameter_generator_catkin as pg

params = {
    "voice" : {
        "type": pg.str_t,
        "description": "NAOqi's voice",
        "default" : ""
    },
    "language" : {
        "type": pg.str_t,
        "description": "NAOqi's language",
        "default" : ""
    },
    "volume" : {
        "type": pg.int_t,
        "description" : "NAOqi's volume",
        "default" : -1,
        "min" : 0,
        "max" : 100
    },
    "vocabulary": {
        "type": pg.str_t,
        "decription" : "A '/' separated string with the words NAO should recognize (eg. 'Hello / World'). If empty, NAO speech recognition will not start",
        "default": ""
    },
    "audio_expression" : {
        "type": pg.bool_t,
        "description": "Enable speech recognizer's audio expression",
        "default" : True
    },
    "visual_expression" : {
        "type": pg.bool_t,
        "description": "Enable speech recognizer's visual expression",
        "default": True
    },
    "word_spotting" : {
        "type": pg.bool_t,
        "description": "Enable word spotting (recognizing words in the middle of a speech), only if your NAO supports it (>v4)",
        "default": False
    }
}

gen = pg.ParameterGenerator()

for name, options in params.items():
    gen.add(
        name,
        options.get("type"),
        0,
        options.get("description"),
        options.get("default"),
        options.get("min"),
        options.get("max")
    )


sys.exit( gen.generate("naoqi_driver", "NaoqiSpeech", "NaoqiSpeech") )
